from Stack import Stack
from lab04 import solveMaze

def test_solveMaze(): # More complex maze, ensures that algorithm works with long mazes and follows correct direction priority
	maze = [
	['+', '+', '+', '+', '+', '+', '+', '+', '+', '+'],
	['+', ' ', '+', '+', '+', '+', '+', ' ', ' ', '+'],
	['+', ' ', ' ', ' ', '+', '+', '+', '+', ' ', '+'],
	['+', ' ', '+', ' ', '+', '+', ' ', '+', ' ', '+'],
	['+', ' ', '+', ' ', '+', '+', ' ', ' ', ' ', '+'],
	['+', ' ', '+', '+', '+', '+', '+', '+', ' ', '+'],
	['+', ' ', ' ', ' ', 'G', '+', ' ', ' ', ' ', '+'],
	['+', ' ', '+', '+', '+', '+', ' ', '+', ' ', '+'],
	['+', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', '+'],
	['+', '+', '+', '+', '+', '+', '+', '+', '+', '+']
	]

	assert solveMaze(maze, 1, 8) == True
	assert maze == [
	['+', '+', '+', '+', '+', '+', '+', '+', '+', '+'],
	['+', 26, '+', '+', '+', '+', '+', 2, 1, '+'],
	['+', 25, 27, 28, '+', '+', '+', '+', 3, '+'],
	['+', 24, '+', 29, '+', '+', 8, '+', 4, '+'],
	['+', 23, '+', 30, '+', '+', 7, 6, 5, '+'],
	['+', 22, '+', '+', '+', '+', '+', '+', 9, '+'],
	['+', 21, 31, 32, 'G', '+', 12, 11, 10, '+'],
	['+', 20, '+', '+', '+', '+', 13, '+', ' ', '+'],
	['+', 19, 18, 17, 16, 15, 14, '+', ' ', '+'],
	['+', '+', '+', '+', '+', '+', '+', '+', '+', '+']
	]

def test_straightMaze(): # Test that the algorithm works with simple mazes like this straight maze
	maze = [
	['+', '+', '+', '+', '+', '+'],
	['+', 'G', ' ', ' ', ' ', '+'],
	['+', '+', '+', '+', '+', '+']
	]

	assert solveMaze(maze, 1, 4) == True
	assert maze == [
	['+', '+', '+', '+', '+', '+'],
	['+', 'G', 3, 2, 1, '+'],
	['+', '+', '+', '+', '+', '+']
	]

def test_blockedSolution(): # Check that if G is blocked off that it still returns False
	maze = [
	['+', '+', '+', '+', '+', '+', '+', '+'],
	['+', 'G', '+', ' ', ' ', ' ', ' ', '+'],
	['+', '+', '+', ' ', ' ', ' ', ' ', '+'],
	['+', ' ', ' ', ' ', ' ', ' ', ' ', '+'],
	['+', ' ', ' ', ' ', ' ', ' ', ' ', '+'],
	['+', ' ', ' ', ' ', ' ', ' ', ' ', '+'],
	['+', '+', '+', '+', '+', '+', '+', '+']
	]

	assert solveMaze(maze, 1, 6) == False
	assert maze == [
	['+', '+', '+', '+', '+', '+', '+', '+'],
	['+', 'G', '+', 4, 3, 2, 1, '+'],
	['+', '+', '+', 5, 18, 19, 26, '+'],
	['+', 8, 7, 6, 17, 20, 25, '+'],
	['+', 9, 12, 13, 16, 21, 24, '+'],
	['+', 10, 11, 14, 15, 22, 23, '+'],
	['+', '+', '+', '+', '+', '+', '+', '+']
	]

def test_orderOfDirections(): # Algorithm should work counter-clockwise around G
	maze = [
	['+', '+', '+', '+', '+'],
	['+', ' ', ' ', ' ', '+'],
	['+', ' ', 'G', ' ', '+'],
	['+', ' ', ' ', ' ', '+'],
	['+', '+', '+', '+', '+']
	]

	assert solveMaze(maze, 3, 3) == True
	assert maze == [
	['+', '+', '+', '+', '+'],
	['+', 5, 4, 3, '+'],
	['+', 6, 'G', 2, '+'],
	['+', 7, 8, 1, '+'],
	['+', '+', '+', '+', '+']
	]

def test_noGoal(): # Test that algorithm returns False when there is no G present
	maze = [
	['+', '+', '+', '+'],
	['+', ' ', ' ', '+'],
	['+', ' ', ' ', '+'],
	['+', '+', '+', '+'],
	['+', '+', '+', '+']
	]

	assert solveMaze(maze, 1, 1) == False
	assert maze == [
	['+', '+', '+', '+'],
	['+', 1, 4, '+'],
	['+', 2, 3, '+'],
	['+', '+', '+', '+'],
	['+', '+', '+', '+']
	]